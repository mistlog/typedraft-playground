{"version":3,"sources":["component/Header.tsx","component/ExampleNav.tsx","component/Editor.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","react_default","a","createElement","className","classNames","container","mergeStyleSets","backgroundColor","border","padding","boxShadow","color","font","ExampleNav","props","SetExample","examples","groups","links","forEach","group_name","link","name","url","isExpanded","map","example","display","key","push","CreateGroupsFromExamples","default_key","values","next","value","_useState","useState","_useState2","Object","slicedToArray","selected","setSelected","Nav","selectedKey","styles","root","width","marginTop","onLinkClick","_","item","Editor","GetOutput","GetExampleUrl","default_example","input_ref","useRef","output","setOutput","_useState3","_useState4","setExample","mode_ref","useEffect","current","endsWith","_useAxios","useAxios","data","_ResetInput","asyncToGenerator","regenerator_default","mark","_callee2","default_input","wrap","_context2","prev","FormatCode","t0","sent","setValue","stop","apply","this","arguments","ResetInput","options","minimap","enabled","scrollbar","useShadows","react_lib","editorDidMount","editor","language","onChange","debounce","_ref","_callee3","event","_args3","_context3","length","undefined","_x4","loading","Spinner","size","SpinnerSize","large","objectSpread","readOnly","_x5","_FormatCode","_callee4","prettier","ts_parser","formatted","_context4","__webpack_require__","e","then","t","bind","format","parser","plugins","abrupt","monaco","init","languages","typescript","typescriptDefaults","setDiagnosticsOptions","noSemanticValidation","noSyntaxValidation","registerDocumentFormattingEditProvider","provideDocumentFormattingEdits","_provideDocumentFormattingEdits","_callee","model","token","_context","getValue","t1","getFullModelRange","t2","text","range","_x","_x2","_x3","catch","error","console","height","markdown","overflow","paddingLeft","paddingRight","fontSize","input","mode","code","Transcriber","Transcribe","concat","Map","flexDirection","header","Boolean","window","location","hostname","match","initializeIcons","mergeStyles","selectors",":global(body), :global(html), :global(#root)","margin","ReactDOM","render","Customizer","FluentCustomizations","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9dbefdc5.chunk.js","sourcesContent":["import React from 'react';\r\nimport { mergeStyleSets } from 'office-ui-fabric-react';\r\n\r\nexport function Header()\r\n{\r\n    return (\r\n        <div className={classNames.container}>\r\n            TypeDraft Playground\r\n        </div>\r\n    )\r\n}\r\n\r\nconst classNames = mergeStyleSets({\r\n    container: {\r\n        backgroundColor: \"#294E80\",\r\n        border: \"0px\",\r\n        padding: \"10px\",\r\n        boxShadow: \"3px 3px 5px rgba(0, 0, 0, 0.25)\",\r\n        color: \"white\",\r\n        font: `normal 24px -apple-system, system-ui, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell,\r\n        \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", Arial, sans-serif`\r\n    }\r\n})","import React, { useState } from 'react';\r\nimport { Nav, INavLinkGroup, INavLink } from 'office-ui-fabric-react';\r\n\r\nexport type Examples = Map<string, Array<IExample>>;\r\n\r\nexport interface IExample\r\n{\r\n    name: string;\r\n    display: string;\r\n}\r\n\r\nexport interface IExampleNav\r\n{\r\n    SetExample: (name: string) => void;\r\n    examples: Examples;\r\n}\r\n\r\nexport function ExampleNav(props: IExampleNav)\r\n{\r\n    const { SetExample, examples } = props;\r\n    const groups = CreateGroupsFromExamples(examples);\r\n    const default_key = (examples.values().next().value as Array<IExample>)[0].name;\r\n    const [selected, setSelected] = useState(default_key);\r\n    return (\r\n        <Nav\r\n            selectedKey={selected}\r\n            groups={groups}\r\n            styles={{ root: { width: 200, marginTop: -20 } }}\r\n            onLinkClick={(_, item) =>\r\n            {\r\n                const name = item!.key!;\r\n                SetExample(name);\r\n                setSelected(name);\r\n            }}\r\n        />\r\n    )\r\n}\r\n\r\n/**\r\n * \r\n */\r\nfunction CreateGroupsFromExamples(examples: Examples): Array<INavLinkGroup>\r\n{\r\n    //\r\n    const links: Array<INavLink> = [];\r\n    examples.forEach((examples, group_name) =>\r\n    {\r\n        const link: INavLink = {\r\n            name: group_name,\r\n            url: \"\",\r\n            isExpanded: true,\r\n            links: examples.map(example => ({ name: example.display, url: \"\", key: example.name }))\r\n        }\r\n\r\n        links.push(link);\r\n    })\r\n\r\n    //\r\n    const groups: Array<INavLinkGroup> = [{ links }];\r\n    return groups;\r\n}\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { monaco, ControlledEditor as MonacoEditor } from '@monaco-editor/react';\r\nimport { mergeStyleSets, SpinnerSize, Spinner } from 'office-ui-fabric-react';\r\nimport { ExampleNav, Examples, IExample } from './ExampleNav';\r\nimport * as EditorAPI from 'monaco-editor/esm/vs/editor/editor.api';\r\nimport { default as useAxios } from \"axios-hooks\";\r\n//@ts-ignore\r\nimport * as debounce from \"lodash.debounce\";\r\n\r\nmonaco.init()\r\n    .then(monaco =>\r\n    {\r\n        monaco.languages.typescript.typescriptDefaults.setDiagnosticsOptions({\r\n            noSemanticValidation: true,\r\n            noSyntaxValidation: true\r\n        });\r\n\r\n        monaco.languages.registerDocumentFormattingEditProvider(\"typescript\", {\r\n            async provideDocumentFormattingEdits(model, options, token)\r\n            {\r\n                return [{\r\n                    text: await FormatCode(model.getValue()),\r\n                    range: model.getFullModelRange()\r\n                }];\r\n            }\r\n        });\r\n\r\n    })\r\n    .catch(error => console.error('An error occurred during initialization of Monaco: ', error));\r\n\r\nexport interface IEditorProps\r\n{\r\n    GetOutput:(code: string, mode: \"markdown\" | \"code\") => Promise<string>;\r\n    GetExampleUrl: (name: string) => string;\r\n    examples: Examples;\r\n}\r\n\r\nexport function Editor(props: IEditorProps)\r\n{\r\n    //\r\n    const { GetOutput, GetExampleUrl, examples } = props;\r\n    const default_example = (examples.values().next().value as Array<IExample>)[0].name;\r\n    //\r\n    const input_ref = useRef<EditorAPI.editor.IStandaloneCodeEditor>();\r\n    const [output, setOutput] = useState(\"\");\r\n    const [example, setExample] = useState(default_example);\r\n\r\n    //\r\n    const url = GetExampleUrl(example);\r\n\r\n    //\r\n    const mode_ref = useRef<\"markdown\" | \"code\">(\"code\");\r\n\r\n    useEffect(() =>\r\n    {\r\n        if (mode_ref)\r\n        {\r\n            mode_ref.current = url.endsWith(\".md.tsx\") ? \"markdown\" : \"code\"\r\n        }\r\n    }, [url])\r\n\r\n    //\r\n    const [{ data }] = useAxios<string>(url)\r\n\r\n    //\r\n    useEffect(() =>\r\n    {\r\n        async function ResetInput()\r\n        {\r\n            // use set value instead of setInput to avoid \"select all\" state after setInput\r\n            const default_input = data ? await FormatCode(data) : \"\";\r\n            input_ref.current && input_ref.current.setValue(default_input);\r\n            const output = await GetOutput(default_input, mode_ref.current);\r\n            setOutput(output);\r\n        }\r\n\r\n        ResetInput();\r\n\r\n    }, [data]);\r\n\r\n    const options: EditorAPI.editor.IEditorOptions = {\r\n        minimap: { enabled: false },\r\n        scrollbar: { useShadows: false }\r\n    };\r\n\r\n    //\r\n    return (\r\n        <div className={classNames.container}>\r\n\r\n            <ExampleNav examples={examples} SetExample={name => setExample(name)} />\r\n\r\n            <MonacoEditor\r\n                width=\"50%\"\r\n                editorDidMount={(_, editor) =>\r\n                {\r\n                    input_ref.current = editor;\r\n                }}\r\n                language=\"typescript\"\r\n                options={options}\r\n                onChange={debounce(async (event: any, value: string = \"\") =>\r\n                {\r\n                    const output = await GetOutput(value, mode_ref.current);\r\n                    setOutput(output);\r\n                }, 1000)}\r\n                loading={<Spinner size={SpinnerSize.large} />}\r\n            />\r\n\r\n            <MonacoEditor\r\n                width=\"50%\"\r\n                language=\"typescript\"\r\n                options={{ ...options, readOnly: true }}\r\n                value={output}\r\n                loading={<Spinner size={SpinnerSize.large} />}\r\n            />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport async function FormatCode(output: string)\r\n{\r\n    const prettier = await import(\"prettier/standalone\");\r\n    const ts_parser = await import(\"prettier/parser-typescript\");\r\n\r\n    const formatted = prettier.format(output, {\r\n        parser: \"typescript\",\r\n        plugins: [ts_parser]\r\n    })\r\n\r\n    return formatted;\r\n}\r\n/**\r\n * \r\n */\r\nconst classNames = mergeStyleSets({\r\n    container: {\r\n        height: \"100%\",\r\n        display: \"flex\"\r\n    },\r\n    markdown: {\r\n        width: \"50%\",\r\n        height: \"100%\",\r\n        overflow: \"auto\",\r\n        paddingLeft: 15,\r\n        paddingRight: 15,\r\n        fontSize: 16\r\n    }\r\n})","import React from 'react';\nimport { Header } from \"./component/Header\";\nimport { Editor, FormatCode } from \"./component/Editor\";\nimport { mergeStyleSets } from 'office-ui-fabric-react';\nimport { Transcriber } from \"typedraft\";\nimport { IExample } from \"./component/ExampleNav\";\n\nasync function GetOutput(input: string, mode: \"markdown\" | \"code\"): Promise<string>\n{\n    try\n    {\n        if (mode === \"code\")\n        {\n            const code = new Transcriber(input).Transcribe();\n            const output = await FormatCode(code);\n            return output;\n        }\n\n        return \"\";\n    }\n    catch (error)\n    {\n        return `${error}`;\n    }\n}\n\nfunction GetExampleUrl(example: string)\n{\n    return `https://raw.githubusercontent.com/mistlog/files/master/typedraft-snippet/${example}`;\n}\n\nconst examples = new Map<string, Array<IExample>>([\n    [\"Local Context\", [\n        { display: \"Function\", name: \"local-context-function.tsx\" },\n        { display: \"Class\", name: \"local-context-class.tsx\" }\n    ]],\n    [\"DSL\", [\n        { display: \"Match\", name: \"dsl-match.tsx\" }\n    ]],\n    [\"Examples\", [\n        { display: \"Huffman Tree\", name: \"huffman-tree.tsx\" },\n        { display: \"Topological Sort\", name: \"topological-sort.tsx\" },\n        { display: \"Transcriber\", name: \"transcriber.tsx\" },\n        { display: \"Jack VM\", name: \"vm.tsx\" }\n    ]]\n]);\n\nexport function App()\n{\n    return (\n        <div className={classNames.container}>\n            <div className={classNames.header}>\n                <Header />\n            </div>\n            <div className={classNames.editor}>\n                <Editor examples={examples} GetOutput={GetOutput} GetExampleUrl={GetExampleUrl} />\n            </div>\n        </div>\n    );\n};\n\nconst classNames = mergeStyleSets({\n    container: {\n        height: \"100vh\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        overflow: \"hidden\"\n    },\n    header: {\n        height: \"10vh\"\n    },\n    editor: {\n        height: \"90vh\",\n        marginTop: 16\n    }\n})","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport { FluentCustomizations } from '@uifabric/fluent-theme';\nimport { Customizer, mergeStyles } from 'office-ui-fabric-react';\nimport * as serviceWorker from './serviceWorker';\nimport { initializeIcons } from '@uifabric/icons';\n\ninitializeIcons();\n\n// Inject some global styles\nmergeStyles({\n  selectors: {\n    ':global(body), :global(html), :global(#root)': {\n      margin: 0,\n      padding: 0,\n      height: '100vh',\n      overflow: \"auto\"\n    }\n  }\n});\n\nReactDOM.render(\n  <Customizer {...FluentCustomizations}>\n    <App />\n  </Customizer>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}